{
  "_args": [
    [
      {
        "raw": "twitter@git+ssh://git@github.com/desmondmorris/node-twitter.git",
        "scope": null,
        "escapedName": "twitter",
        "name": "twitter",
        "rawSpec": "git+ssh://git@github.com/desmondmorris/node-twitter.git",
        "spec": "git+ssh://git@github.com/desmondmorris/node-twitter.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:desmondmorris/node-twitter.git",
          "sshUrl": "git+ssh://git@github.com/desmondmorris/node-twitter.git",
          "httpsUrl": "git+https://github.com/desmondmorris/node-twitter.git",
          "gitUrl": "git://github.com/desmondmorris/node-twitter.git",
          "shortcut": "github:desmondmorris/node-twitter",
          "directUrl": "https://raw.githubusercontent.com/desmondmorris/node-twitter/master/package.json"
        }
      },
      "/Users/mota/Sandbox/twitter-globe"
    ]
  ],
  "_from": "git+ssh://git@github.com/desmondmorris/node-twitter.git",
  "_id": "twitter@1.7.0",
  "_inCache": true,
  "_location": "/twitter",
  "_phantomChildren": {},
  "_requested": {
    "raw": "twitter@git+ssh://git@github.com/desmondmorris/node-twitter.git",
    "scope": null,
    "escapedName": "twitter",
    "name": "twitter",
    "rawSpec": "git+ssh://git@github.com/desmondmorris/node-twitter.git",
    "spec": "git+ssh://git@github.com/desmondmorris/node-twitter.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:desmondmorris/node-twitter.git",
      "sshUrl": "git+ssh://git@github.com/desmondmorris/node-twitter.git",
      "httpsUrl": "git+https://github.com/desmondmorris/node-twitter.git",
      "gitUrl": "git://github.com/desmondmorris/node-twitter.git",
      "shortcut": "github:desmondmorris/node-twitter",
      "directUrl": "https://raw.githubusercontent.com/desmondmorris/node-twitter/master/package.json"
    }
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git+ssh://git@github.com/desmondmorris/node-twitter.git#3be527f87b416526eb18e29c43c6e6da95851f34",
  "_shasum": "e8d645d7464b6cead16f4b2332e9df53c1394c73",
  "_shrinkwrap": null,
  "_spec": "twitter@git+ssh://git@github.com/desmondmorris/node-twitter.git",
  "_where": "/Users/mota/Sandbox/twitter-globe",
  "author": {
    "name": "Desmond Morris",
    "email": "hi@desmondmorris.com"
  },
  "bugs": {
    "url": "https://github.com/desmondmorris/node-twitter/issues"
  },
  "dependencies": {
    "deep-extend": "^0.5.0",
    "request": "^2.72.0"
  },
  "description": "Twitter API client library for node.js",
  "devDependencies": {
    "eslint": "^3.12.0",
    "mocha": "^3.2.0",
    "nock": "^9.0.2"
  },
  "gitHead": "3be527f87b416526eb18e29c43c6e6da95851f34",
  "homepage": "https://github.com/desmondmorris/node-twitter",
  "keywords": [
    "twitter",
    "streaming",
    "oauth"
  ],
  "license": "MIT",
  "main": "./lib/twitter",
  "name": "twitter",
  "optionalDependencies": {},
  "readme": "# Twitter for Node.js\n\nAn asynchronous client library for the Twitter [REST](https://dev.twitter.com/rest/public) and [Streaming](https://dev.twitter.com/streaming/overview) API's.\n\n[![Build Status](https://travis-ci.org/desmondmorris/node-twitter.svg?branch=master)](https://travis-ci.org/desmondmorris/node-twitter)\n [![NPM](https://nodei.co/npm/twitter.png?mini=true)](https://nodei.co/npm/twitter/)\n\n```javascript\nvar Twitter = require('twitter');\n\nvar client = new Twitter({\n  consumer_key: '',\n  consumer_secret: '',\n  access_token_key: '',\n  access_token_secret: ''\n});\n\nvar params = {screen_name: 'nodejs'};\nclient.get('statuses/user_timeline', params, function(error, tweets, response) {\n  if (!error) {\n    console.log(tweets);\n  }\n});\n```\n\n## Installation\n\n`npm install twitter`\n\n## Quick Start\n\nYou will need valid Twitter developer credentials in the form of a set of consumer and access tokens/keys.  You can get these [here](https://apps.twitter.com/).  Do not forgot to adjust your permissions - most POST request require write permissions.\n\n```javascript\nvar Twitter = require('twitter');\n```\n\n## For User based authentication:\n\n```javascript\nvar client = new Twitter({\n  consumer_key: '',\n  consumer_secret: '',\n  access_token_key: '',\n  access_token_secret: ''\n});\n```\n\nAdd your credentials accordingly.  I would use environment variables to keep your private info safe.  So something like:\n\n```javascript\nvar client = new Twitter({\n  consumer_key: process.env.TWITTER_CONSUMER_KEY,\n  consumer_secret: process.env.TWITTER_CONSUMER_SECRET,\n  access_token_key: process.env.TWITTER_ACCESS_TOKEN_KEY,\n  access_token_secret: process.env.TWITTER_ACCESS_TOKEN_SECRET\n});\n```\n## For Application Only based authentication:\n\nYou will need to fetch a bearer token from Twitter as documented [Here](https://dev.twitter.com/oauth/application-only), once you have it you can use it as follows.\n\n```javascript\nvar client = new Twitter({\n  consumer_key: '',\n  consumer_secret: '',\n  bearer_token: ''\n});\n```\n\nAdd your credentials accordingly.  I would use environment variables to keep your private info safe.  So something like:\n\n```javascript\nvar client = new Twitter({\n  consumer_key: process.env.TWITTER_CONSUMER_KEY,\n  consumer_secret: process.env.TWITTER_CONSUMER_SECRET,\n  bearer_token: process.env.TWITTER_BEARER_TOKEN\n});\n```\n\nNB - You will not have access to all endpoints whilst using Application Only authentication, but you will have access to higher API limits.\n\n## Requests\n\nYou now have the ability to make GET and POST requests against the API via the convenience methods.\n\n```javascript\nclient.get(path, params, callback);\nclient.post(path, params, callback);\nclient.stream(path, params, callback);\n```\n\n## REST API\n\nYou simply need to pass the endpoint and parameters to one of convenience methods.  Take a look at the [documentation site](https://dev.twitter.com/rest/public) to reference available endpoints.\n\nExample, lets get a [list of favorites](https://dev.twitter.com/rest/reference/get/favorites/list):\n\n```javascript\nclient.get('favorites/list', function(error, tweets, response) {\n  if(error) throw error;\n  console.log(tweets);  // The favorites.\n  console.log(response);  // Raw response object.\n});\n```\n\nHow about an example that passes parameters?  Let's  [tweet something](https://dev.twitter.com/rest/reference/post/statuses/update):\n\n```javascript\nclient.post('statuses/update', {status: 'I Love Twitter'},  function(error, tweet, response) {\n  if(error) throw error;\n  console.log(tweet);  // Tweet body.\n  console.log(response);  // Raw response object.\n});\n```\n\n### Promises\n\nThe REST API convenience methods will also return Promises if:\n\n1.  A callback is omitted\n2.  Promise's are available.\n\nIf those two conditions are met, the above example becomes:\n\n```javascript\nclient.post('statuses/update', {status: 'I Love Twitter'})\n  .then(function (tweet) {\n    console.log(tweet);\n  })\n  .catch(function (error) {\n    throw error;\n  })\n```\n\nNote, the raw `response` object returned by the Request module is not passed through\nthe fulfilled promise.  If you require this, please use the callback pattern.\n\n## Streaming API\n\nUsing the `stream` convenience method, you to open and manipulate data via a stream piped directly from one of the streaming API's. Let's see who is talking about javascript:\n\n```javascript\nvar stream = client.stream('statuses/filter', {track: 'javascript'});\nstream.on('data', function(event) {\n  console.log(event && event.text);\n});\n\nstream.on('error', function(error) {\n  throw error;\n});\n\n// You can also get the stream in a callback if you prefer.\nclient.stream('statuses/filter', {track: 'javascript'}, function(stream) {\n  stream.on('data', function(event) {\n    console.log(event && event.text);\n  });\n\n  stream.on('error', function(error) {\n    throw error;\n  });\n});\n```\n\n**Note** twitter stream several types of events, see [the docs](https://dev.twitter.com/streaming/overview/messages-types) for more info. There is no canonical way of detecting tweets versus other messages, but some users have had success with the following strategy.\n\n```javascript\n_ = require('lodash')\nconst isTweet = _.conforms({\n  contributors: _.isObject,\n  id_str: _.isString,\n  text: _.isString,\n})\n```\n\n## Examples\n\n* [Tweet](https://github.com/desmondmorris/node-twitter/tree/master/examples#tweet)\n* [Search](https://github.com/desmondmorris/node-twitter/tree/master/examples#search)\n* [Streams](https://github.com/desmondmorris/node-twitter/tree/master/examples#streams)\n* [Proxy](https://github.com/desmondmorris/node-twitter/tree/master/examples#proxy)\n* [Media](https://github.com/desmondmorris/node-twitter/tree/master/examples#media)\n* [Chunked Media](https://github.com/desmondmorris/node-twitter/tree/master/examples#chunked-media)\n\n## Contributors\n\nOriginally authored by  [@technoweenie](http://github.com/technoweenie)\n and maintained by [@jdub](http://github.com/jdub)\n\nCurrently maintained by [@desmondmorris](http://github.com/desmondmorris)\n\n[And we cannot forget the community](https://github.com/desmondmorris/node-twitter/graphs/contributors)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/desmondmorris/node-twitter.git"
  },
  "scripts": {
    "lint": "eslint test/*.js lib/*.js",
    "test": "npm run lint && mocha"
  },
  "version": "1.7.0"
}
